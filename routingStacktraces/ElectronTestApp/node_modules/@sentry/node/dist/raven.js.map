{"version":3,"file":"raven.js","sourceRoot":"","sources":["../src/raven.ts"],"names":[],"mappings":";;AACA,iCAAmC;AA+BnC,+DAA+D;AAC/D,yCAAyC;AAC5B,QAAA,KAAK,GAAkB,SAAgB,CAAC;AAQtC,QAAA,cAAc,IAAhB,KAAqC,SAAiB;KAChE,UAAwB,sBADI,QAAA,aAAa,oBAChB","sourcesContent":["import { Breadcrumb, SentryEvent } from '@sentry/shim';\nimport * as RavenNode from 'raven';\n\nexport type SendMethod = (event: SentryEvent, cb?: (err: any) => void) => void;\n\n/** A HTTP transport module. */\nexport interface Transport {\n  request(options: object | string): void;\n}\n\n/** A Raven transport wrapper. */\nexport interface RavenTransport {\n  send(): void;\n}\n\n/** A constructor class that creates a RavenTransport. */\nexport interface TransportClass {\n  new (options: { transport: Transport }): RavenTransport;\n}\n\n/** Provides access to internal raven functionality. */\nexport interface RavenInternal {\n  captureBreadcrumb(breadcrumb: Breadcrumb): void;\n  captureException(exception: any, cb?: (event: SentryEvent) => void): void;\n  captureMessage(message: string, cb?: (event: SentryEvent) => void): void;\n  config(dsn: string, options: object): RavenInternal;\n  install(onFatalError?: (error: Error) => void): void;\n  send: SendMethod;\n  transport: RavenTransport;\n  version: string;\n}\n\n/** Casted raven instance with access to internal functions. */\n// tslint:disable-next-line:variable-name\nexport const Raven: RavenInternal = RavenNode as any;\n\n/** Interface for transports exported by RavenNode. */\ninterface Transports {\n  HTTPSTransport: TransportClass;\n  HTTPTransport: TransportClass;\n}\n\nexport const { HTTPSTransport, HTTPTransport } = (RavenNode as any)\n  .transports as Transports;\n"]}
{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../src/sdk.ts"],"names":[],"mappings":";;AAAA,qCAA2C;AAC3C,qCAAgD;AAEhD,uCAA0C;AAE1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AACH,cAAqB,OAAoB;IACvC,kBAAW,CAAC,uBAAY,EAAE,OAAO,CAAC,CAAC;AACrC,CAAC;AAFD,oBAEC;AAED,gDAAgD;AAChD;IACE,OAAO,uBAAgB,EAAkB,CAAC;AAC5C,CAAC;AAFD,gDAEC","sourcesContent":["import { initAndBind } from '@sentry/core';\nimport { getCurrentClient } from '@sentry/shim';\nimport { NodeOptions } from './backend';\nimport { NodeFrontend } from './frontend';\n\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n *\n * @example\n * const { setContext } = require('@sentry/node');\n * setContext({\n *   extra: { battery: 0.7 },\n *   tags: { user_mode: 'admin' },\n *   user: { id: '4711' },\n * });\n *\n * @example\n * const { addBreadcrumb } = require('@sentry/node');\n * SentryClient.addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n *\n * @example\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n *\n * @see NodeOptions for documentation on configuration options.\n */\nexport function init(options: NodeOptions): void {\n  initAndBind(NodeFrontend, options);\n}\n\n/** Returns the current NodeFrontend, if any. */\nexport function getCurrentFrontend(): NodeFrontend {\n  return getCurrentClient() as NodeFrontend;\n}\n"]}
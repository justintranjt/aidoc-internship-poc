{"version":3,"file":"backend.js","sourceRoot":"","sources":["../../src/main/backend.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  app,\n  crashReporter,\n  ipcMain,\n  net,\n  powerMonitor,\n  screen,\n  // tslint:disable-next-line:no-implicit-dependencies\n} from 'electron';\nimport { join } from 'path';\n\nimport { Frontend, SentryError } from '@sentry/core';\nimport { NodeBackend } from '@sentry/node';\nimport {\n  addBreadcrumb,\n  Breadcrumb,\n  captureEvent,\n  captureMessage,\n  Context,\n  SentryEvent,\n  setExtraContext,\n  setTagsContext,\n  setUserContext,\n  Severity,\n} from '@sentry/shim';\nimport { forget, Store } from '@sentry/utils';\n\nimport {\n  CommonBackend,\n  ElectronOptions,\n  IPC_CONTEXT,\n  IPC_CRUMB,\n  IPC_EVENT,\n  IPC_PING,\n} from '../common';\nimport { captureMinidump } from '../sdk';\nimport { normalizeUrl } from './normalize';\nimport { MinidumpUploader } from './uploader';\n\n/** A promise that resolves when the app is ready. */\nlet appReady = Promise.resolve();\n\n/** Patch to access internal CrashReporter functionality. */\ninterface CrashReporterExt {\n  getCrashesDirectory(): string;\n}\n\n/** Gets the path to the Sentry cache directory. */\nfunction getCachePath(): string {\n  return join(app.getPath('userData'), 'sentry');\n}\n\n/** Returns extra information from a renderer's web contents. */\nfunction getRendererExtra(\n  contents: Electron.WebContents,\n): { [key: string]: string } {\n  return {\n    crashed_process: `renderer[${contents.id}]`,\n    crashed_url: normalizeUrl(contents.getURL()),\n  };\n}\n\n/** Backend implementation for Electron renderer backends. */\nexport class MainBackend implements CommonBackend {\n  /** Handle to the SDK frontend for callbacks. */\n  private readonly frontend: Frontend<ElectronOptions>;\n\n  /** The inner SDK used to record Node events. */\n  private readonly inner: NodeBackend;\n\n  /** Store to persist breadcrumbs beyond application crashes. */\n  private readonly breadcrumbs: Store<Breadcrumb[]>;\n\n  /** Store to persist context information beyond application crashes. */\n  private readonly context: Store<Context>;\n\n  /** Uploader for minidump files. */\n  private uploader?: MinidumpUploader;\n\n  /** Creates a new Electron backend instance. */\n  public constructor(frontend: Frontend<ElectronOptions>) {\n    this.frontend = frontend;\n    this.inner = new NodeBackend(frontend);\n\n    const path = getCachePath();\n    this.breadcrumbs = new Store<Breadcrumb[]>(path, 'breadcrumbs', []);\n    this.context = new Store<Context>(path, 'context', {});\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public install(): boolean {\n    let success = true;\n\n    if (this.isNativeEnabled()) {\n      success = this.installNativeHandler() && success;\n    }\n\n    if (this.isJavaScriptEnabled()) {\n      success = this.installJavaScriptHandler() && success;\n    }\n\n    this.installIPC();\n    this.installAutoBreadcrumbs();\n\n    return success;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromException(exception: any): Promise<SentryEvent> {\n    return this.inner.eventFromException(exception);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromMessage(message: string): Promise<SentryEvent> {\n    return this.inner.eventFromMessage(message);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(event: SentryEvent): Promise<number> {\n    await appReady;\n    return this.inner.sendEvent(event);\n  }\n\n  /**\n   * Uploads the given minidump and attaches event information.\n   *\n   * @param path A relative or absolute path to the minidump file.\n   * @param event Optional event information to add to the minidump request.\n   * @returns A promise that resolves to the status code of the request.\n   */\n  public async uploadMinidump(\n    path: string,\n    event: SentryEvent = {},\n  ): Promise<number> {\n    if (this.uploader) {\n      return this.uploader.uploadMinidump({ path, event });\n    }\n\n    return 200;\n  }\n\n  /** Returns the full list of breadcrumbs (or empty). */\n  public loadBreadcrumbs(): Breadcrumb[] {\n    return this.breadcrumbs.get();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeBreadcrumb(breadcrumb: Breadcrumb): boolean {\n    // We replicate the behavior of the frontend\n    const { maxBreadcrumbs = 30 } = this.frontend.getOptions();\n    this.breadcrumbs.update(breadcrumbs =>\n      [...breadcrumbs, breadcrumb].slice(\n        -Math.max(0, Math.min(maxBreadcrumbs, 100)),\n      ),\n    );\n\n    // Still, the frontend should merge breadcrumbs into events, for now\n    return true;\n  }\n\n  /** Returns the latest context (or empty). */\n  public loadContext(): Context {\n    return this.context.get();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeContext(nextContext: Context): boolean {\n    // We replicate the behavior of the frontend\n    this.context.update(context => {\n      if (nextContext.extra) {\n        context.extra = { ...context.extra, ...nextContext.extra };\n      }\n      if (nextContext.tags) {\n        context.tags = { ...context.tags, ...nextContext.tags };\n      }\n      if (nextContext.user) {\n        context.user = { ...context.user, ...nextContext.user };\n      }\n\n      return context;\n    });\n\n    // Still, the frontend should merge context into events, for now\n    return true;\n  }\n\n  /** Returns whether JS is enabled. */\n  private isJavaScriptEnabled(): boolean {\n    return this.frontend.getOptions().enableJavaScript !== false;\n  }\n\n  /** Returns whether native reports are enabled. */\n  private isNativeEnabled(): boolean {\n    // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n    // requirements. In this case, we prevent enabling native crashes entirely.\n    // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n    if (process.mas) {\n      return false;\n    }\n\n    return this.frontend.getOptions().enableNative !== false;\n  }\n\n  /** Activates the Electron CrashReporter. */\n  private installNativeHandler(): boolean {\n    // We are only called by the frontend if the SDK is enabled and a valid DSN\n    // has been configured. If no DSN is present, this indicates a programming\n    // error.\n    const dsn = this.frontend.getDSN();\n    if (!dsn) {\n      throw new SentryError(\n        'Invariant exception: install() must not be called when disabled',\n      );\n    }\n\n    // We will manually submit errors, but CrashReporter requires a submitURL in\n    // some versions. Also, provide a productName and companyName, which we will\n    // add manually to the event's context during submission.\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: app.getName(),\n      submitURL: '',\n      uploadToServer: false,\n    });\n\n    // The crashReporter has an undocumented method to retrieve the directory\n    // it uses to store minidumps in. The structure in this directory depends\n    // on the crash library being used (Crashpad or Breakpad).\n    const reporter: CrashReporterExt = crashReporter as any;\n    const crashesDirectory = reporter.getCrashesDirectory();\n\n    this.uploader = new MinidumpUploader(dsn, crashesDirectory, getCachePath());\n\n    // Flush already cached minidumps from the queue.\n    forget(this.uploader.flushQueue());\n\n    // Start to submit recent minidump crashes. This will load breadcrumbs and\n    // context information that was cached on disk prior to the crash.\n    forget(this.sendNativeCrashes({}));\n\n    // Every time a subprocess or renderer crashes, start sending minidumps\n    // right away.\n    app.on('web-contents-created', (_, contents) => {\n      contents.on('crashed', async () => {\n        try {\n          await this.sendNativeCrashes(getRendererExtra(contents));\n        } catch (e) {\n          console.error(e);\n        }\n\n        addBreadcrumb({\n          category: 'exception',\n          level: Severity.Critical,\n          message: 'Renderer Crashed',\n          timestamp: new Date().getTime() / 1000,\n        });\n      });\n    });\n\n    if (this.frontend.getOptions().enableUnresponsive !== false) {\n      app.on('browser-window-created', (_, window) => {\n        window.on('unresponsive', () => {\n          captureMessage('BrowserWindow Unresponsive');\n        });\n      });\n    }\n\n    return true;\n  }\n\n  /** Activates the Node SDK for the main process. */\n  private async installJavaScriptHandler(): Promise<boolean> {\n    if (!this.inner.install()) {\n      return false;\n    }\n\n    // Override the transport mechanism with electron's net module\n    this.inner.setTransport(net);\n\n    // This is only needed for the electron net module\n    appReady = app.isReady()\n      ? Promise.resolve()\n      : new Promise(resolve => {\n          app.once('ready', resolve);\n        });\n\n    return true;\n  }\n\n  /** Installs IPC handlers to receive events and metadata from renderers. */\n  private installIPC(): void {\n    ipcMain.on(IPC_PING, (event: Electron.Event) => {\n      event.sender.send(IPC_PING);\n    });\n\n    ipcMain.on(IPC_CRUMB, (_: any, crumb: Breadcrumb) => {\n      addBreadcrumb(crumb);\n    });\n\n    ipcMain.on(IPC_EVENT, (ipc: Electron.Event, event: SentryEvent) => {\n      event.extra = { ...getRendererExtra(ipc.sender), ...event.extra };\n      captureEvent(event);\n    });\n\n    ipcMain.on(IPC_CONTEXT, (_: any, context: Context) => {\n      if (context.user) {\n        setUserContext(context.user);\n      }\n      if (context.tags) {\n        setTagsContext(context.tags);\n      }\n      if (context.extra) {\n        setExtraContext(context.extra);\n      }\n    });\n  }\n\n  /** Installs auto-breadcrumb handlers for certain Electron events. */\n  private installAutoBreadcrumbs(): void {\n    this.instrumentBreadcrumbs('app', app);\n\n    app.once('ready', () => {\n      // We can't access these until 'ready'\n      this.instrumentBreadcrumbs('Screen', screen);\n      this.instrumentBreadcrumbs('PowerMonitor', powerMonitor);\n    });\n\n    app.on('web-contents-created', (_, contents) => {\n      // SetImmediate is required for contents.id to be correct\n      // https://github.com/electron/electron/issues/12036\n      setImmediate(() => {\n        this.instrumentBreadcrumbs(`WebContents[${contents.id}]`, contents, [\n          'dom-ready',\n          'load-url',\n          'destroyed',\n        ]);\n      });\n    });\n  }\n\n  /**\n   * Hooks into the Electron EventEmitter to capture breadcrumbs for the\n   * specified events.\n   */\n  private instrumentBreadcrumbs(\n    category: string,\n    emitter: Electron.EventEmitter,\n    events: string[] = [],\n  ): void {\n    type Emit = (event: string, ...args: any[]) => boolean;\n    const emit = emitter.emit.bind(emitter) as Emit;\n\n    emitter.emit = (event, ...args) => {\n      if (events.length === 0 || events.indexOf(event) > -1) {\n        const breadcrumb = {\n          category: 'electron',\n          message: `${category}.${event}`,\n          timestamp: new Date().getTime() / 1000,\n          type: 'ui',\n        };\n\n        addBreadcrumb(breadcrumb);\n      }\n\n      return emit(event, ...args);\n    };\n  }\n\n  /** Loads new native crashes from disk and sends them to Sentry. */\n  private async sendNativeCrashes(extra: object): Promise<void> {\n    // Whenever we are called, assume that the crashes we are going to load down\n    // below have occurred recently. This means, we can use the same event data\n    // for all minidumps that we load now. There are two conditions:\n    //\n    //  1. The application crashed and we are just starting up. The stored\n    //     breadcrumbs and context reflect the state during the application\n    //     crash.\n    //\n    //  2. A renderer process crashed recently and we have just been notified\n    //     about it. Just use the breadcrumbs and context information we have\n    //     right now and hope that the delay was not too long.\n\n    const uploader = this.uploader;\n    if (uploader === undefined) {\n      throw new SentryError('Invariant violation: Native crashes not enabled');\n    }\n\n    const event: SentryEvent = { extra };\n    const paths = await uploader.getNewMinidumps();\n    paths.map(path => {\n      captureMinidump(path, event);\n    });\n  }\n}\n"]}
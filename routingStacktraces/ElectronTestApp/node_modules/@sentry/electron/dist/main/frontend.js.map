{"version":3,"file":"frontend.js","sourceRoot":"","sources":["../../src/main/frontend.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uCAAmD;AAGnD,uCAAwC;AACxC,uCAA6C;AAC7C,2CAA6C;AAE7C,oCAAoC;AACpC,MAAM,QAAQ,GAAG,iBAAiB,CAAC;AAEnC,uCAAuC;AACvC,2BAA2B;AAC3B,MAAM,WAAW,GAAW,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC;AAElE,8DAA8D;AAC9D,kBAA0B,SAAQ,mBAA0C;IAE1E;;;OAGG;IACH,YAAmB,OAAwB;QACzC,KAAK,CAAC,qBAAW,EAAE,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACO,UAAU;QAClB,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;IAClD,CAAC;IAED;;OAEG;IACI,eAAe;QACpB,OAAO;YACL,WAAW,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,eAAe,EAAE;YAChD,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,WAAW,EAAE;SACzC,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACU,eAAe,CAC1B,IAAY,EACZ,QAAqB,EAAE,EACvB,QAAe,IAAI,CAAC,gBAAgB,EAAE;;YAEtC,KAAK,CAAC,IAAI,mBAAK,UAAU,EAAE,QAAQ,IAAK,KAAK,CAAC,IAAI,CAAE,CAAC;YACrD,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,CAAM,UAAU,EAAC,EAAE,gDACvD,OAAA,IAAI,CAAC,UAAU,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA,GAAA,CACnD,CAAC;QACJ,CAAC;KAAA;IAED;;OAEG;IACU,YAAY,CAAC,KAAkB,EAAE,KAAY;;;YACxD,KAAK,CAAC,IAAI,mBAAK,UAAU,EAAE,YAAY,IAAK,KAAK,CAAC,IAAI,CAAE,CAAC;YACzD,MAAM,sBAAkB,YAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACzC,CAAC;KAAA;IAED;;OAEG;IACU,aAAa,CACxB,UAAsB,EACtB,KAAY;;;YAEZ,MAAM,uBAAmB,YAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAC/C,CAAC;KAAA;IAED;;OAEG;IACU,UAAU,CAAC,WAAoB,EAAE,KAAY;;;YACxD,MAAM,oBAAgB,YAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAC7C,CAAC;KAAA;IAED;;OAEG;IACa,YAAY,CAC1B,KAAkB,EAClB,KAAY;;;YAEZ,MAAM,QAAQ,GAAG,MAAM,sBAAkB,YAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,MAAM,GAAG,MAAM,0BAAgB,CAAC,QAAQ,CAAC,CAAC;YAChD,OAAO,0BAAc,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC;KAAA;CACF;AAjFD,oCAiFC","sourcesContent":["import { FrontendBase, Scope } from '@sentry/core';\nimport { Breadcrumb, Context, SdkInfo, SentryEvent } from '@sentry/shim';\nimport { CommonFrontend, ElectronOptions } from '../common';\nimport { MainBackend } from './backend';\nimport { addEventDefaults } from './context';\nimport { normalizeEvent } from './normalize';\n\n/** SDK name used in every event. */\nconst SDK_NAME = 'sentry-electron';\n\n/** SDK version used in every event. */\n// tslint:disable-next-line\nconst SDK_VERSION: string = require('../../package.json').version;\n\n/** Frontend implementation for Electron renderer backends. */\nexport class MainFrontend extends FrontendBase<MainBackend, ElectronOptions>\n  implements CommonFrontend {\n  /**\n   * Creates a new Electron SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: ElectronOptions) {\n    super(MainBackend, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected getSdkInfo(): SdkInfo {\n    return { name: SDK_NAME, version: SDK_VERSION };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getInitialScope(): Scope {\n    return {\n      breadcrumbs: this.getBackend().loadBreadcrumbs(),\n      context: this.getBackend().loadContext(),\n    };\n  }\n\n  /**\n   * Uploads a native crash dump (Minidump) to Sentry.\n   *\n   * @param path The relative or absolute path to the minidump.\n   * @param event Optional event payload to attach to the minidump.\n   * @param scope The SDK scope used to upload.\n   */\n  public async captureMinidump(\n    path: string,\n    event: SentryEvent = {},\n    scope: Scope = this.getInternalScope(),\n  ): Promise<void> {\n    event.tags = { event_type: 'native', ...event.tags };\n    await this.processEvent(event, scope, async finalEvent =>\n      this.getBackend().uploadMinidump(path, finalEvent),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async captureEvent(event: SentryEvent, scope: Scope): Promise<void> {\n    event.tags = { event_type: 'javascript', ...event.tags };\n    await super.captureEvent(event, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async addBreadcrumb(\n    breadcrumb: Breadcrumb,\n    scope: Scope,\n  ): Promise<void> {\n    await super.addBreadcrumb(breadcrumb, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async setContext(nextContext: Context, scope: Scope): Promise<void> {\n    await super.setContext(nextContext, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected async prepareEvent(\n    event: SentryEvent,\n    scope: Scope,\n  ): Promise<SentryEvent> {\n    const prepared = await super.prepareEvent(event, scope);\n    const merged = await addEventDefaults(prepared);\n    return normalizeEvent(merged);\n  }\n}\n"]}
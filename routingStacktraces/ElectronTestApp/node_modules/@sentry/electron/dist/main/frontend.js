"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@sentry/core");
const backend_1 = require("./backend");
const context_1 = require("./context");
const normalize_1 = require("./normalize");
/** SDK name used in every event. */
const SDK_NAME = 'sentry-electron';
/** SDK version used in every event. */
// tslint:disable-next-line
const SDK_VERSION = require('../../package.json').version;
/** Frontend implementation for Electron renderer backends. */
class MainFrontend extends core_1.FrontendBase {
    /**
     * Creates a new Electron SDK instance.
     * @param options Configuration options for this SDK.
     */
    constructor(options) {
        super(backend_1.MainBackend, options);
    }
    /**
     * @inheritDoc
     */
    getSdkInfo() {
        return { name: SDK_NAME, version: SDK_VERSION };
    }
    /**
     * @inheritDoc
     */
    getInitialScope() {
        return {
            breadcrumbs: this.getBackend().loadBreadcrumbs(),
            context: this.getBackend().loadContext(),
        };
    }
    /**
     * Uploads a native crash dump (Minidump) to Sentry.
     *
     * @param path The relative or absolute path to the minidump.
     * @param event Optional event payload to attach to the minidump.
     * @param scope The SDK scope used to upload.
     */
    captureMinidump(path, event = {}, scope = this.getInternalScope()) {
        return __awaiter(this, void 0, void 0, function* () {
            event.tags = Object.assign({ event_type: 'native' }, event.tags);
            yield this.processEvent(event, scope, (finalEvent) => __awaiter(this, void 0, void 0, function* () { return this.getBackend().uploadMinidump(path, finalEvent); }));
        });
    }
    /**
     * @inheritDoc
     */
    captureEvent(event, scope) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            event.tags = Object.assign({ event_type: 'javascript' }, event.tags);
            yield _super("captureEvent").call(this, event, scope);
        });
    }
    /**
     * @inheritDoc
     */
    addBreadcrumb(breadcrumb, scope) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("addBreadcrumb").call(this, breadcrumb, scope);
        });
    }
    /**
     * @inheritDoc
     */
    setContext(nextContext, scope) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("setContext").call(this, nextContext, scope);
        });
    }
    /**
     * @inheritDoc
     */
    prepareEvent(event, scope) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const prepared = yield _super("prepareEvent").call(this, event, scope);
            const merged = yield context_1.addEventDefaults(prepared);
            return normalize_1.normalizeEvent(merged);
        });
    }
}
exports.MainFrontend = MainFrontend;
//# sourceMappingURL=frontend.js.map
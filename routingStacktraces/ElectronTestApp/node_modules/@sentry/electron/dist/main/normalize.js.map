{"version":3,"file":"normalize.js","sourceRoot":"","sources":["../../src/main/normalize.ts"],"names":[],"mappings":";;AACA,yCAAsC;AACtC,oDAAoD;AACpD,uCAA+B;AAE/B,wDAAwD;AACxD,MAAM,QAAQ,GAAG,cAAG,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AAEtD;;;;;;;GAOG;AACH,sBAA6B,GAAW,EAAE,OAAe,QAAQ;IAC/D,OAAO,SAAS,CAAC,GAAG,CAAC;SAClB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;SACnB,OAAO,CAAC,IAAI,MAAM,CAAC,kBAAkB,IAAI,KAAK,EAAE,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;AACvE,CAAC;AAJD,oCAIC;AAED;;;GAGG;AACH,uBAAuB,KAAkB;IACvC,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;IAExC,uCAAuC;IACvC,IAAI,UAAU,EAAE;QACd,OAAO,UAAU,CAAC;KACnB;IAED,IAAI,SAAS,EAAE;QACb,4CAA4C;QAC5C,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;YAChB,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;SAChC;QAED,kEAAkE;QAClE,MAAM,KAAK,GAAI,SAAkD,CAAC;QAClE,IAAI,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YACnC,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;SACnC;KACF;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAED;;;;;;GAMG;AACH,wBAA+B,KAAkB;IAC/C,4EAA4E;IAC5E,6EAA6E;IAC7E,gCAAgC;IAChC,MAAM,IAAI,GAAG,aAAK,CAAC,KAAK,CAAC,CAAC;IAE1B,wEAAwE;IACxE,mEAAmE;IACnE,OAAQ,IAA4B,CAAC,OAAO,CAAC;IAE7C,yEAAyE;IACzE,oDAAoD;IACpD,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;IACvC,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,EAAE;QACnC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAChC,IAAI,KAAK,CAAC,QAAQ,EAAE;gBAClB,KAAK,CAAC,QAAQ,GAAG,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aAC/C;QACH,CAAC,CAAC,CAAC;KACJ;IAED,MAAM,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;IAC9B,IAAI,OAAO,CAAC,GAAG,EAAE;QACf,OAAO,CAAC,GAAG,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KACzC;IAED,yEAAyE;IACzE,4EAA4E;IAC5E,+BAA+B;IAC/B,IAAI,OAAO,CAAC,OAAO,EAAE;QACnB,OAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;KACtC;IAED,4EAA4E;IAC5E,wEAAwE;IACxE,4BAA4B;IAC5B,MAAM,EAAE,IAAI,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;IAC3B,OAAO,IAAI,CAAC,WAAW,CAAC;IAExB,OAAO,IAAI,CAAC;AACd,CAAC;AAxCD,wCAwCC","sourcesContent":["import { SentryEvent, SentryException, Stacktrace } from '@sentry/shim';\nimport { clone } from '@sentry/utils';\n// tslint:disable-next-line:no-implicit-dependencies\nimport { app } from 'electron';\n\n/** Application base path used for URL normalization. */\nconst APP_PATH = app.getAppPath().replace(/\\\\/g, '/');\n\n/**\n * Normalizes URLs in exceptions and stacktraces so Sentry can fingerprint\n * across platforms.\n *\n * @param url The URL to be normalized.\n * @param base (optional) The application base path.\n * @returns The normalized URL.\n */\nexport function normalizeUrl(url: string, base: string = APP_PATH): string {\n  return decodeURI(url)\n    .replace(/\\\\/g, '/')\n    .replace(new RegExp(`(file:\\/\\/)?\\/*${base}\\/*`, 'ig'), 'app:///');\n}\n\n/**\n * Returns a reference to the exception stack trace in the given event.\n * @param event An event potentially containing stack traces.\n */\nfunction getStacktrace(event: SentryEvent): Stacktrace | undefined {\n  const { stacktrace, exception } = event;\n\n  // Try the main event stack trace first\n  if (stacktrace) {\n    return stacktrace;\n  }\n\n  if (exception) {\n    // Raven Node adheres to the Event interface\n    if (exception[0]) {\n      return exception[0].stacktrace;\n    }\n\n    // Raven JS uses the full values interface, which has been removed\n    const raven = (exception as any) as { values: SentryException[] };\n    if (raven.values && raven.values[0]) {\n      return raven.values[0].stacktrace;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Normalizes all URLs in an event. See {@link normalizeUrl} for more\n * information.\n *\n * @param event The event to normalize.\n * @returns The normalized event.\n */\nexport function normalizeEvent(event: SentryEvent): SentryEvent {\n  // NOTE: Events from Raven currently contain data that does not conform with\n  // the `SentryEvent` interface. Until this has been resolved, we need to cast\n  // to avoid typescript warnings.\n  const copy = clone(event);\n\n  // The culprit has been deprecated about two years ago and can safely be\n  // removed. Remove this line, once this has been resolved in Raven.\n  delete (copy as { culprit: string }).culprit;\n\n  // Retrieve stack traces and normalize their URLs. Without this, grouping\n  // would not work due to user folders in file names.\n  const stacktrace = getStacktrace(copy);\n  if (stacktrace && stacktrace.frames) {\n    stacktrace.frames.forEach(frame => {\n      if (frame.filename) {\n        frame.filename = normalizeUrl(frame.filename);\n      }\n    });\n  }\n\n  const { request = {} } = copy;\n  if (request.url) {\n    request.url = normalizeUrl(request.url);\n  }\n\n  // The user agent is parsed by Sentry and would overwrite certain context\n  // information, which we don't want. Generally remove it, since we know that\n  // we are browsing with Chrome.\n  if (request.headers) {\n    delete request.headers['User-Agent'];\n  }\n\n  // The Node SDK currently adds a default tag for server_name, which contains\n  // the machine name of the computer running Electron. This is not useful\n  // information in this case.\n  const { tags = {} } = copy;\n  delete tags.server_name;\n\n  return copy;\n}\n"]}
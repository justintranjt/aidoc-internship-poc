import { DSN, Scope } from '@sentry/core';
import { Breadcrumb, Context, SentryEvent } from '@sentry/shim';
import { CommonFrontend, ElectronOptions } from './common';
/**
 * The Sentry Electron SDK Frontend.
 *
 * @see ElectronOptions for documentation on configuration options.
 * @see SentryClient for usage documentation.
 */
export declare class ElectronFrontend implements CommonFrontend {
    /** Actual frontend implementation for the main or renderer process. */
    private readonly inner;
    /**
     * Creates a new Electron SDK instance.
     *
     * This constructor automatically chooses the right implementation for the
     * process type (`browser` or `renderer`).
     *
     * @param options Configuration options for this SDK.
     */
    constructor(options: ElectronOptions);
    /**
     * @inheritDoc
     */
    captureMinidump(path: string, event: SentryEvent, scope: Scope): Promise<void>;
    /**
     * @inheritDoc
     */
    install(): boolean;
    /**
     * @inheritDoc
     */
    captureException(exception: any, scope?: Scope | undefined): Promise<void>;
    /**
     * @inheritDoc
     */
    captureMessage(message: string, scope?: Scope | undefined): Promise<void>;
    /**
     * @inheritDoc
     */
    captureEvent(event: SentryEvent, scope?: Scope | undefined): Promise<void>;
    /**
     * @inheritDoc
     */
    addBreadcrumb(breadcrumb: Breadcrumb, scope?: Scope | undefined): void;
    /**
     * @inheritDoc
     */
    getDSN(): DSN | undefined;
    /**
     * @inheritDoc
     */
    getOptions(): ElectronOptions;
    /**
     * @inheritDoc
     */
    setContext(context: Context, scope: Scope): void;
    /**
     * @inheritDoc
     */
    getInitialScope(): Scope;
}

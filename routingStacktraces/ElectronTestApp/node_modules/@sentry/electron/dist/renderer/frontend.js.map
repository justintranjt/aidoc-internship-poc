{"version":3,"file":"frontend.js","sourceRoot":"","sources":["../../src/renderer/frontend.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uCAAmD;AAEnD,oDAAoD;AACpD,uCAAuC;AACvC,sCAMmB;AACnB,uCAA4C;AAE5C,8DAA8D;AAC9D,sBACE,SAAQ,mBAA8C;IAEtD;;;OAGG;IACH,YAAmB,OAAwB;QACzC,KAAK,CAAC,yBAAe,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACO,UAAU;QAClB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;OAEG;IACI,eAAe;QACpB,OAAO;YACL,WAAW,EAAE,EAAE;YACf,OAAO,EAAE,EAAE;SACZ,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACU,eAAe,CAC1B,KAAa,EACb,MAAmB,EACnB,MAAa;;YAEb,OAAO;QACT,CAAC;KAAA;IAED;;OAEG;IACU,YAAY,CAAC,KAAkB,EAAE,KAAY;;YACxD,sBAAW,CAAC,IAAI,CAAC,kBAAS,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAC5C,CAAC;KAAA;IAED;;OAEG;IACU,aAAa,CACxB,UAAsB,EACtB,KAAY;;YAEZ,sBAAW,CAAC,IAAI,CAAC,kBAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QACjD,CAAC;KAAA;IAED;;OAEG;IACU,UAAU,CAAC,WAAoB,EAAE,KAAY;;YACxD,sBAAW,CAAC,IAAI,CAAC,oBAAW,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;QACpD,CAAC;KAAA;CACF;AAlED,4CAkEC","sourcesContent":["import { FrontendBase, Scope } from '@sentry/core';\nimport { Breadcrumb, Context, SdkInfo, SentryEvent } from '@sentry/shim';\n// tslint:disable-next-line:no-implicit-dependencies\nimport { ipcRenderer } from 'electron';\nimport {\n  CommonFrontend,\n  ElectronOptions,\n  IPC_CONTEXT,\n  IPC_CRUMB,\n  IPC_EVENT,\n} from '../common';\nimport { RendererBackend } from './backend';\n\n/** Frontend implementation for Electron renderer backends. */\nexport class RendererFrontend\n  extends FrontendBase<RendererBackend, ElectronOptions>\n  implements CommonFrontend {\n  /**\n   * Creates a new Electron SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: ElectronOptions) {\n    super(RendererBackend, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected getSdkInfo(): SdkInfo {\n    return {};\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getInitialScope(): Scope {\n    return {\n      breadcrumbs: [],\n      context: {},\n    };\n  }\n\n  /**\n   * Uploads a native crash dump (Minidump) to Sentry.\n   *\n   * @param path The relative or absolute path to the minidump.\n   * @param event Optional event payload to attach to the minidump.\n   * @param scope The SDK scope used to upload.\n   */\n  public async captureMinidump(\n    _path: string,\n    _event: SentryEvent,\n    _scope: Scope,\n  ): Promise<void> {\n    // Noop\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async captureEvent(event: SentryEvent, scope: Scope): Promise<void> {\n    ipcRenderer.send(IPC_EVENT, event, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async addBreadcrumb(\n    breadcrumb: Breadcrumb,\n    scope: Scope,\n  ): Promise<void> {\n    ipcRenderer.send(IPC_CRUMB, breadcrumb, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async setContext(nextContext: Context, scope: Scope): Promise<void> {\n    ipcRenderer.send(IPC_CONTEXT, nextContext, scope);\n  }\n}\n"]}
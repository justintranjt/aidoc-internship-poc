"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@sentry/core");
// tslint:disable-next-line:no-implicit-dependencies
const electron_1 = require("electron");
const common_1 = require("../common");
const backend_1 = require("./backend");
/** Frontend implementation for Electron renderer backends. */
class RendererFrontend extends core_1.FrontendBase {
    /**
     * Creates a new Electron SDK instance.
     * @param options Configuration options for this SDK.
     */
    constructor(options) {
        super(backend_1.RendererBackend, options);
    }
    /**
     * @inheritDoc
     */
    getSdkInfo() {
        return {};
    }
    /**
     * @inheritDoc
     */
    getInitialScope() {
        return {
            breadcrumbs: [],
            context: {},
        };
    }
    /**
     * Uploads a native crash dump (Minidump) to Sentry.
     *
     * @param path The relative or absolute path to the minidump.
     * @param event Optional event payload to attach to the minidump.
     * @param scope The SDK scope used to upload.
     */
    captureMinidump(_path, _event, _scope) {
        return __awaiter(this, void 0, void 0, function* () {
            // Noop
        });
    }
    /**
     * @inheritDoc
     */
    captureEvent(event, scope) {
        return __awaiter(this, void 0, void 0, function* () {
            electron_1.ipcRenderer.send(common_1.IPC_EVENT, event, scope);
        });
    }
    /**
     * @inheritDoc
     */
    addBreadcrumb(breadcrumb, scope) {
        return __awaiter(this, void 0, void 0, function* () {
            electron_1.ipcRenderer.send(common_1.IPC_CRUMB, breadcrumb, scope);
        });
    }
    /**
     * @inheritDoc
     */
    setContext(nextContext, scope) {
        return __awaiter(this, void 0, void 0, function* () {
            electron_1.ipcRenderer.send(common_1.IPC_CONTEXT, nextContext, scope);
        });
    }
}
exports.RendererFrontend = RendererFrontend;
//# sourceMappingURL=frontend.js.map
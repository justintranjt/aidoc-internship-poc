import { FrontendBase, Scope } from '@sentry/core';
import { Breadcrumb, Context, SdkInfo, SentryEvent } from '@sentry/shim';
import { CommonFrontend, ElectronOptions } from '../common';
import { RendererBackend } from './backend';
/** Frontend implementation for Electron renderer backends. */
export declare class RendererFrontend extends FrontendBase<RendererBackend, ElectronOptions> implements CommonFrontend {
    /**
     * Creates a new Electron SDK instance.
     * @param options Configuration options for this SDK.
     */
    constructor(options: ElectronOptions);
    /**
     * @inheritDoc
     */
    protected getSdkInfo(): SdkInfo;
    /**
     * @inheritDoc
     */
    getInitialScope(): Scope;
    /**
     * Uploads a native crash dump (Minidump) to Sentry.
     *
     * @param path The relative or absolute path to the minidump.
     * @param event Optional event payload to attach to the minidump.
     * @param scope The SDK scope used to upload.
     */
    captureMinidump(_path: string, _event: SentryEvent, _scope: Scope): Promise<void>;
    /**
     * @inheritDoc
     */
    captureEvent(event: SentryEvent, scope: Scope): Promise<void>;
    /**
     * @inheritDoc
     */
    addBreadcrumb(breadcrumb: Breadcrumb, scope: Scope): Promise<void>;
    /**
     * @inheritDoc
     */
    setContext(nextContext: Context, scope: Scope): Promise<void>;
}

import { Frontend } from '@sentry/core';
import { Breadcrumb, Context, SentryEvent } from '@sentry/shim';
import { CommonBackend, ElectronOptions } from '../common';
/** Backend implementation for Electron renderer backends. */
export declare class RendererBackend implements CommonBackend {
    /** Handle to the SDK frontend for callbacks. */
    private readonly frontend;
    /** The inner SDK used to record JavaScript events. */
    private readonly inner;
    /** Creates a new Electron backend instance. */
    constructor(frontend: Frontend<ElectronOptions>);
    /**
     * @inheritDoc
     */
    install(): boolean;
    /**
     * @inheritDoc
     */
    eventFromException(exception: any): Promise<SentryEvent>;
    /**
     * @inheritDoc
     */
    eventFromMessage(message: string): Promise<SentryEvent>;
    /**
     * @inheritDoc
     */
    sendEvent(_: SentryEvent): Promise<number>;
    /**
     * @inheritDoc
     */
    storeBreadcrumb(_: Breadcrumb): boolean;
    /**
     * @inheritDoc
     */
    storeContext(_: Context): boolean;
    /** Returns whether JS is enabled. */
    private isJavaScriptEnabled();
    /** Returns whether native reports are enabled. */
    private isNativeEnabled();
    /** Activates the Electron CrashReporter. */
    private installNativeHandler();
    /** Checks if the main processes is available and logs a warning if not. */
    private pingMainProcess();
}

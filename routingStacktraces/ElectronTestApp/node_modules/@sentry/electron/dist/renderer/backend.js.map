{"version":3,"file":"backend.js","sourceRoot":"","sources":["../../src/renderer/backend.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable-next-line:no-implicit-dependencies\nimport { crashReporter, ipcRenderer, remote } from 'electron';\n\nimport { BrowserBackend } from '@sentry/browser';\nimport { Frontend, SentryError } from '@sentry/core';\nimport { Breadcrumb, Context, SentryEvent } from '@sentry/shim';\n\nimport { CommonBackend, ElectronOptions, IPC_PING } from '../common';\n\n/** Timeout used for registering with the main process. */\nconst PING_TIMEOUT = 500;\n\n/** Backend implementation for Electron renderer backends. */\nexport class RendererBackend implements CommonBackend {\n  /** Handle to the SDK frontend for callbacks. */\n  private readonly frontend: Frontend<ElectronOptions>;\n\n  /** The inner SDK used to record JavaScript events. */\n  private readonly inner: BrowserBackend;\n\n  /** Creates a new Electron backend instance. */\n  public constructor(frontend: Frontend<ElectronOptions>) {\n    this.frontend = frontend;\n    this.inner = new BrowserBackend(frontend);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public install(): boolean {\n    let success = true;\n\n    if (this.isNativeEnabled()) {\n      success = this.installNativeHandler() && success;\n    }\n\n    if (this.isJavaScriptEnabled()) {\n      success = this.inner.install() && success;\n    }\n\n    this.pingMainProcess();\n    return success;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromException(exception: any): Promise<SentryEvent> {\n    return this.inner.eventFromException(exception);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromMessage(message: string): Promise<SentryEvent> {\n    return this.inner.eventFromMessage(message);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(_: SentryEvent): Promise<number> {\n    throw new SentryError(\n      'Invariant violation: Only supported in main process',\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeBreadcrumb(_: Breadcrumb): boolean {\n    throw new SentryError(\n      'Invariant violation: Only supported in main process',\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeContext(_: Context): boolean {\n    throw new SentryError(\n      'Invariant violation: Only supported in main process',\n    );\n  }\n\n  /** Returns whether JS is enabled. */\n  private isJavaScriptEnabled(): boolean {\n    return this.frontend.getOptions().enableJavaScript !== false;\n  }\n\n  /** Returns whether native reports are enabled. */\n  private isNativeEnabled(): boolean {\n    // On macOS, we should start the Electron CrashReporter only in the main\n    // process. It uses Crashpad internally, which will catch errors from all\n    // sub processes thanks to out-of-processes crash handling. On other\n    // platforms we need to start the CrashReporter in every sub process. For\n    // more information see: https://goo.gl/nhqqwD\n    if (process.platform === 'darwin') {\n      return false;\n    }\n\n    // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n    // requirements. In this case, we prevent enabling native crashes entirely.\n    // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n    if (process.mas) {\n      return false;\n    }\n\n    return this.frontend.getOptions().enableNative !== false;\n  }\n\n  /** Activates the Electron CrashReporter. */\n  private installNativeHandler(): boolean {\n    // We will manually submit errors, but CrashReporter requires a submitURL in\n    // some versions. Also, provide a productName and companyName, which we will\n    // add manually to the event's context during submission.\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: remote.app.getName(),\n      submitURL: '',\n      uploadToServer: false,\n    });\n\n    return true;\n  }\n\n  /** Checks if the main processes is available and logs a warning if not. */\n  private pingMainProcess(): void {\n    ipcRenderer.send(IPC_PING);\n\n    const timeout = setTimeout(() => {\n      console.warn(\n        'Could not connect to Sentry main process. Did you call init?',\n      );\n    }, PING_TIMEOUT);\n\n    ipcRenderer.on(IPC_PING, () => {\n      clearTimeout(timeout);\n    });\n  }\n}\n"]}
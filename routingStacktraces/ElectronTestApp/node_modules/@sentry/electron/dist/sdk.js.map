{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../src/sdk.ts"],"names":[],"mappings":";;AAAA,uCAA2C;AAC3C,uCAA4E;AAE5E,yCAA8C;AAE9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,cAAqB,OAAwB;IAC3C,kBAAW,CAAC,2BAAgB,EAAE,OAAO,CAAC,CAAC;AACzC,CAAC;AAFD,oBAEC;AAED,oDAAoD;AACpD;IACE,OAAO,uBAAgB,EAAsB,CAAC;AAChD,CAAC;AAFD,gDAEC;AAED;;;;;GAKG;AACH,yBAAgC,IAAY,EAAE,QAAqB,EAAE;IACnE,oBAAa,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AAChD,CAAC;AAFD,0CAEC","sourcesContent":["import { initAndBind } from '@sentry/core';\nimport { _callOnClient, getCurrentClient, SentryEvent } from '@sentry/shim';\nimport { ElectronOptions } from './common';\nimport { ElectronFrontend } from './dispatch';\n\n/**\n * The Sentry Electron SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * entry modules. This applies to the main process as well as all renderer\n * processes or further sub processes you spawn. To set context information or\n * send manual events, use the provided methods.\n *\n * @example\n * const { init } = require('@sentry/electron');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n *\n * @example\n * import { setContext } from '@sentry/electron';\n * setContext({\n *   extra: { battery: 0.7 },\n *   tags: { user_mode: 'admin' },\n *   user: { id: '4711' },\n * });\n *\n * @example\n * import { addBreadcrumb } from '@sentry/electron';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n *\n * @example\n * import * as Sentry from '@sentry/electron';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n *\n * @see ElectronOptions for documentation on configuration options.\n */\nexport function init(options: ElectronOptions): void {\n  initAndBind(ElectronFrontend, options);\n}\n\n/** Returns the current ElectronFrontend, if any. */\nexport function getCurrentFrontend(): ElectronFrontend {\n  return getCurrentClient() as ElectronFrontend;\n}\n\n/**\n * Uploads a native crash dump (Minidump) to Sentry.\n *\n * @param path The relative or absolute path to the minidump.\n * @param event Optional event payload to attach to the minidump.\n */\nexport function captureMinidump(path: string, event: SentryEvent = {}): void {\n  _callOnClient('captureMinidump', path, event);\n}\n"]}
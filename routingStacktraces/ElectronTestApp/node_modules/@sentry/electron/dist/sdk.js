"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@sentry/core");
const shim_1 = require("@sentry/shim");
const dispatch_1 = require("./dispatch");
/**
 * The Sentry Electron SDK Client.
 *
 * To use this SDK, call the {@link init} function as early as possible in the
 * entry modules. This applies to the main process as well as all renderer
 * processes or further sub processes you spawn. To set context information or
 * send manual events, use the provided methods.
 *
 * @example
 * const { init } = require('@sentry/electron');
 *
 * init({
 *   dsn: '__DSN__',
 *   // ...
 * });
 *
 * @example
 * import { setContext } from '@sentry/electron';
 * setContext({
 *   extra: { battery: 0.7 },
 *   tags: { user_mode: 'admin' },
 *   user: { id: '4711' },
 * });
 *
 * @example
 * import { addBreadcrumb } from '@sentry/electron';
 * addBreadcrumb({
 *   message: 'My Breadcrumb',
 *   // ...
 * });
 *
 * @example
 * import * as Sentry from '@sentry/electron';
 * Sentry.captureMessage('Hello, world!');
 * Sentry.captureException(new Error('Good bye'));
 * Sentry.captureEvent({
 *   message: 'Manual',
 *   stacktrace: [
 *     // ...
 *   ],
 * });
 *
 * @see ElectronOptions for documentation on configuration options.
 */
function init(options) {
    core_1.initAndBind(dispatch_1.ElectronFrontend, options);
}
exports.init = init;
/** Returns the current ElectronFrontend, if any. */
function getCurrentFrontend() {
    return shim_1.getCurrentClient();
}
exports.getCurrentFrontend = getCurrentFrontend;
/**
 * Uploads a native crash dump (Minidump) to Sentry.
 *
 * @param path The relative or absolute path to the minidump.
 * @param event Optional event payload to attach to the minidump.
 */
function captureMinidump(path, event = {}) {
    shim_1._callOnClient('captureMinidump', path, event);
}
exports.captureMinidump = captureMinidump;
//# sourceMappingURL=sdk.js.map